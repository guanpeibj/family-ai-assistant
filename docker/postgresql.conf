# PostgreSQL 16.9 优化配置 - 针对 FAA 使用场景
# 基于：JSONB查询 + 向量搜索 + 聚合查询

# ==========================================
# 内存配置优化
# ==========================================

# 共享缓冲区：增加到系统内存的25%（假设8GB系统内存）
shared_buffers = 256MB

# 工作内存：JSONB和聚合查询需要更多内存
work_mem = 8MB

# 维护工作内存：用于CREATE INDEX, VACUUM, ALTER TABLE
maintenance_work_mem = 128MB

# 有效缓存大小：系统总缓存估计值
effective_cache_size = 2GB

# 临时缓冲区：处理临时表
temp_buffers = 32MB

# ==========================================
# JSONB 和 GIN 索引优化
# ==========================================

# GIN索引待插入清单大小（JSONB索引性能关键）
gin_pending_list_limit = 8MB

# ==========================================
# 查询规划器优化
# ==========================================

# 随机页面开销：SSD优化（降低随机访问代价）
random_page_cost = 1.1

# 顺序页面开销
seq_page_cost = 1.0

# CPU开销：增加CPU相对I/O的权重（现代CPU更快）
cpu_tuple_cost = 0.01
cpu_index_tuple_cost = 0.005
cpu_operator_cost = 0.0025

# 有效I/O并发：SSD可以处理更多并发I/O
effective_io_concurrency = 200

# ==========================================
# 连接和并发优化
# ==========================================

# 监听地址：允许容器网络连接
listen_addresses = '*'

# 最大连接数（适中，避免过多连接浪费内存）
max_connections = 100

# 最大准备事务数（用于连接池）
max_prepared_transactions = 0

# ==========================================
# WAL 和检查点优化
# ==========================================

# WAL缓冲区
wal_buffers = 16MB

# 检查点完成目标：延长检查点时间，减少I/O峰值
checkpoint_completion_target = 0.9

# 最大WAL段数：允许更大的WAL积累
max_wal_size = 2GB
min_wal_size = 100MB

# ==========================================
# 自动清理优化（JSONB表重要）
# ==========================================

# 自动清理：JSONB更新会产生死行，需要积极清理
autovacuum = on
autovacuum_max_workers = 3
autovacuum_naptime = 20s

# 自动清理触发阈值：更频繁地清理JSONB表
autovacuum_vacuum_threshold = 50
autovacuum_vacuum_scale_factor = 0.1
autovacuum_analyze_threshold = 50
autovacuum_analyze_scale_factor = 0.05

# 自动清理工作内存
autovacuum_work_mem = 128MB

# ==========================================
# 统计信息收集优化
# ==========================================

# 增加统计信息采样，提高JSONB查询规划准确性
default_statistics_target = 200

# 跟踪更多查询活动信息
track_activities = on
track_counts = on
track_io_timing = on
track_functions = pl

# ==========================================
# 日志优化（开发和性能调试）
# ==========================================

# 记录慢查询：超过100ms的查询
log_min_duration_statement = 100

# 记录检查点活动
log_checkpoints = on

# 记录自动清理活动
log_autovacuum_min_duration = 0

# 记录锁等待
log_lock_waits = on

# ==========================================
# 扩展特定优化
# ==========================================

# 为 pgvector 优化
# (这些参数在运行时通过 ALTER SYSTEM 设置)

# 共享预加载库（如果需要）
# shared_preload_libraries = 'pg_stat_statements,auto_explain'

# ==========================================
# 时区和本地化
# ==========================================

# 设置时区（与应用保持一致）
timezone = 'Asia/Shanghai'
log_timezone = 'Asia/Shanghai'

# 字符集
lc_messages = 'C'
lc_monetary = 'C'
lc_numeric = 'C' 
lc_time = 'C'

# ==========================================
# 其他性能优化
# ==========================================

# 启用JIT编译（PostgreSQL 11+）
jit = on
jit_above_cost = 100000
jit_inline_above_cost = 500000
jit_optimize_above_cost = 500000

# 并行查询设置
max_parallel_workers_per_gather = 2
max_parallel_workers = 4
parallel_tuple_cost = 0.1
parallel_setup_cost = 1000.0

# 大对象处理（用于向量和大JSONB）
max_locks_per_transaction = 256
