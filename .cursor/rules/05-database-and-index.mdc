---
alwaysApply: true
description: 数据库模型、索引与查询策略（SQLAlchemy + asyncpg + pgvector）
---
## 模型文件
- ORM 模型：[src/db/models.py](mdc:src/db/models.py)
  - `users`、`user_channels`、`memories`、`reminders`、`interactions`。
  - `memories` 提供 `amount/occurred_at/embedding(JSONB+Vector)`，并有 `ai_understanding JSONB`。
- 迁移：[alembic/versions/20250813_rename_reminders_sent_add_fk.py](mdc:alembic/versions/20250813_rename_reminders_sent_add_fk.py)

## MCP 侧索引与扩展
- 扩展：`vector`、`pg_trgm`、`jsonb_path_ops`。
- 索引（见 MCP 初始化）：
  - `embedding ivfflat vector_cosine_ops`
  - `content gin_trgm_ops`
  - `ai_understanding jsonb_path_ops`
  - 表达式索引：`(ai_understanding->>'thread_id'|'type'|'channel')`
  - 组合索引：`(ai_understanding->>'thread_id'), occurred_at DESC`、`(user_id, occurred_at DESC)`
  - 软去重唯一索引：`(user_id, (ai_understanding->>'external_id')) WHERE ai_understanding ? 'external_id'`

## 查询策略
- 语义优先：有 `query_embedding` 时按相似度排序；否则回退 `content % trigram` + 结构化过滤。
- 结构化过滤优先：`date_from/to`、金额范围、`jsonb_equals`、`thread_id/type/channel`。
- 共享线程：仅在必要时启用，结果有上限保护。

## 存储策略
- 记忆写入：`store`/`batch_store`；`ai_understanding` 建议包含 `occurred_at/thread_id/trace_id/external_id/source/version`。
- 更新：优先 `update_memory_fields` 浅合并；不可逆删除改用 `soft_delete`。