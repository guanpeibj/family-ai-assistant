---
globs: src/ai_engine.py,*prompt*,**/prompts/*
---
# AI 提示词工程规则

## 核心原则：赋能 AI 自主决策

### 1. 系统 Prompt 设计

#### 1.1 角色定位
```python
SYSTEM_PROMPT = """
你是一个智能的家庭 AI 助手，服务于一个有多个孩子的家庭。
你的核心能力是理解、记忆、分析和建议。

重要原则：
1. 你有完全的自主权决定如何理解和处理信息
2. 你可以自由地提取和存储任何你认为重要的信息
3. 你应该主动发现模式、建立关联、提供洞察
4. 随着数据积累，你应该越来越了解这个家庭
"""
```

#### 1.2 开放式指导
```python
# ❌ 错误：限制性指令
"提取金额、类别、日期三个字段"

# ✅ 正确：开放式指导
"理解用户消息的所有相关信息，包括但不限于显式和隐式的内容"
```

### 2. 工具使用 Prompt

#### 2.1 存储决策
```python
STORE_GUIDANCE = """
当用户分享信息时，自主决定：
1. 这些信息是否值得记忆？
2. 除了明显的信息，还有什么隐含信息？
3. 这与之前的记忆有什么关联？
4. 未来可能如何使用这些信息？

你可以在 ai_understanding 中存储任何结构的数据。
"""
```

#### 2.2 搜索策略
```python
SEARCH_GUIDANCE = """
搜索时，考虑：
1. 用户的真实需求是什么？
2. 哪些相关信息可能有帮助？
3. 如何组合多个搜索获得最佳结果？
4. 历史context如何影响搜索策略？
"""
```

### 3. 动态 Prompt 构建

#### 3.1 包含历史上下文
```python
def build_prompt_with_context(user_message: str, recent_memories: list):
    return f"""
    最近的互动历史：
    {format_memories(recent_memories)}
    
    基于以上历史，理解并响应：{user_message}
    
    你可以参考历史信息，提供更个性化的回复。
    """
```

#### 3.2 渐进式学习
```python
# 随着使用增加细节
if len(family_memories) > 100:
    prompt += "\n你已经积累了丰富的家庭信息，可以提供更深入的分析。"
    
if detect_patterns(recent_queries):
    prompt += f"\n注意到最近关注点：{patterns}，可以主动提供相关建议。"
```

### 4. 回复生成 Prompt

#### 4.1 个性化回复
```python
RESPONSE_GUIDANCE = """
生成回复时：
1. 根据历史交互调整语气和风格
2. 如果发现有用的模式或洞察，主动分享
3. 适时提供建议，但不要过度
4. 记住家庭成员的名字和偏好
"""
```

#### 4.2 智能建议
```python
# 让 AI 决定何时和如何提建议
"基于你对这个家庭的了解，如果有相关的建议或提醒，请自然地包含在回复中。"
```

### 5. Prompt 优化策略

#### 5.1 A/B 测试
```python
# 可以测试不同的 prompt 版本
PROMPT_VERSIONS = {
    "v1": "简洁直接的指导...",
    "v2": "更详细的指导...",
    "v3": "包含示例的指导..."
}
```

#### 5.2 反馈循环
```python
# 根据 AI 表现调整 prompt
if ai_missed_important_info:
    prompt += "\n特别注意识别和保存重要日期、金额等关键信息。"
```

### 6. 多模态 Prompt（未来扩展）

```python
IMAGE_UNDERSTANDING = """
分析图片时，提取所有相关信息：
- 显式内容（文字、数字、物品）
- 隐式信息（场景、情绪、关系）
- 与家庭历史的关联
- 可能的后续行动建议
"""
```

### 7. Prompt 管理

#### 7.1 版本控制
```python
# prompts/versions.py
PROMPTS = {
    "2024.01": {
        "system": "...",
        "tools": {...}
    },
    "2024.02": {
        # 改进的版本
    }
}
```

#### 7.2 配置化管理
```yaml
# prompts.yaml
system:
  role: "智能家庭助手"
  principles:
    - "自主决策"
    - "持续学习"
    - "个性化服务"
```

## 记住：Prompt 是 AI 的"软件"

好的 prompt 设计可以在不改变代码的情况下，显著提升系统能力。这是 FAA 能够自我进化的关键机制之一。

## 文件引用
- AI 引擎实现：[ai_engine.py](mdc:src/ai_engine.py)
- 配置管理：[config.py](mdc:src/core/config.py)
