---
globs: src/ai_engine.py
description: AI引擎统一驱动流程 - 让AI自主处理所有对话理解和关系识别
---
## 重构后的统一流程
**核心理念**: 工程简化、AI驱动、自动进化

```
用户输入 → 统一AI理解（含上下文） → 工具计划 → 执行 → 回复
```

### 主流程 `process_message`:
1) **预处理**: 附件衍生文本合并
2) **统一理解** `_understand_message`: AI自主处理所有对话复杂度
   - 基础上下文（最近8轮对话，用于识别跟进关系）
   - 智能深度搜索（仅复杂查询/统计时启用语义搜索）
   - **AI完全自主**: 对话关系识别、信息合并、完整性判断
3) **分支处理**: AI决定需要澄清 → 生成澄清回复并返回
4) **工具执行**: `_build_tool_plan` → `_execute_tool_steps`
5) **回复生成**: 简单确认 or 详细回复
6) **持久化**: 对话回合存储 + 交互轨迹记录

## AI自主能力（重构核心）
**删除的复杂工程逻辑**:
- ❌ `_light_understand_message` (轻理解)
- ❌ `_maybe_merge_followup` (跟进检测)
- ❌ `_classify_followup` (跟进分类)
- ❌ `_reduce_thread_state` (线程状态归纳)

**AI现在完全自主处理**:
- ✅ 对话关系识别: "给二女儿的" → 识别为跟进回答
- ✅ 信息合并: 自动合并跟进信息形成完整理解
- ✅ 完整性判断: 自主决定是否需要澄清
- ✅ 上下文感知: 智能利用历史对话理解当前意图

## 性能优化策略
- **智能上下文分层**: 
  * 基础上下文（最近8轮）: 始终包含，用于对话关系识别
  * 深度上下文（语义搜索）: 仅复杂查询时启用
- **`_should_semantic_search`优化**: 简短跟进回答（≤20字）通常跳过语义搜索
- **嵌入缓存**: trace级 + 全局LRU，成本优化

## 核心约束（不变）
- 不在引擎中硬编码业务逻辑；一切依赖 Prompt 与 MCP 工具
- 工具时间预算来自 MCP `/tools` 的 `x_time_budget`
- 严格模式下MCP不可用时不模拟，但理解/计划正常进行
- 共享线程支持跨用户检索（有上限保护）

## 扩展原则（AI驱动）
- **新对话模式**: 通过优化Prompt实现，无需修改代码
- **行为改进**: 调整YAML配置即可，工程代码保持稳定
- **能力提升**: 更强的AI模型自动提升系统能力

## 关键点
- `understanding`输出必须包含`conversation_act`字段
- `store`时自动合并`entities`→`ai_data`
- 工具返回的`_meta`项需在展示时过滤
- Threema渠道<500字长度控制保持不变