---
alwaysApply: true
---
# AI 自我进化规则 - FAA 的核心设计理念

## 核心期待：工程固定，能力自动增长

FAA 的设计核心是：**即使工程代码保持不变，系统的智能和能力也应该随着 AI 模型的进步和数据的积累而自动提升。**

### 1. 能力增长的三个维度

#### 1.1 AI 模型升级带来的能力提升
```python
# 工程代码不变，只需要更新 API Key 或模型名称
OPENAI_MODEL = "gpt-4"  # 未来可能是 gpt-5, gpt-6...

# 自动获得的新能力：
# - 更准确的意图理解
# - 更智能的实体提取
# - 更自然的对话生成
# - 更复杂的推理能力
```

#### 1.2 数据积累带来的个性化提升
```python
# 随着使用，AI 自动学习家庭模式
# 无需修改代码，系统越用越智能：
# - 记住家庭成员的偏好
# - 理解家庭的消费模式
# - 预测可能的需求
# - 给出更精准的建议
```

#### 1.3 Prompt 优化带来的行为改进
```python
# 只需调整 prompt，无需改代码
AI_SYSTEM_PROMPT = """
你是一个家庭 AI 助手。
[随着经验积累，这里可以添加更多指导]
"""
```

### 2. 设计原则：为进化留空间

#### 2.1 数据结构的开放性
```python
# JSONB 字段让 AI 自由存储新发现的信息类型
ai_understanding = {
    # 今天 AI 可能只提取这些
    "amount": 50,
    "category": "食品",
    
    # 未来 AI 可能自动提取更多
    "nutrition_info": {...},
    "price_trend": {...},
    "health_impact": {...},
    # AI 自己决定存什么
}
```

#### 2.2 部分数据结构的准确查/存
对一些需要精确的数据（账目信息、 健康信息），要精确查/存

#### 2.3 工具的通用性
```python
# 工具不限制 AI 的使用方式
async def store(content, ai_data, user_id):
    # AI 今天可能用来存账单
    # 明天可能用来存健康数据
    # 后天可能用来存学习笔记
    # 工具不变，用途由 AI 决定
```

#### 2.4 交互的灵活性
```python
# 不预设对话模式
async def process_message(content, user_id):
    # AI 自主决定：
    # - 如何理解消息
    # - 调用哪些工具
    # - 如何组合结果
    # - 如何回复用户
```

### 3. 避免限制 AI 发展的反模式

#### ❌ 错误：硬编码业务逻辑
```python
# 这会限制 AI 的发展空间
if expense_type == "food":
    return "注意饮食健康"
elif expense_type == "medical":
    return "保重身体"
```

#### ✅ 正确：让 AI 自主决策
```python
# AI 根据上下文和积累的知识自主生成建议
response = await ai.generate_response(context, history)
```

#### ❌ 错误：固定的数据模式
```python
# 限制了未来的可能性
class Expense:
    amount: float
    category: Literal["food", "transport", "medical"]
```

#### ✅ 正确：开放的数据结构
```python
# AI 可以存储任何它认为重要的信息
memory = {
    "content": user_input,
    "ai_understanding": ai_extracted_data  # 完全自由
}
```

### 4. 测试进化能力

#### 4.1 模型升级测试
- 切换到更新的模型，验证能力自动提升
- 不需要修改代码，功能自动变强

#### 4.2 数据积累测试
- 模拟长期使用，验证个性化改进
- 系统应该越用越懂用户

#### 4.3 Prompt 调整测试
- 只改 prompt，验证行为改变
- 新功能通过 prompt 实现，不改代码

### 5. 进化指标

- **理解准确度**：随时间/模型升级而提升
- **建议相关性**：随数据积累而提升
- **响应自然度**：随模型进化而提升
- **功能丰富度**：随 prompt 优化而提升

## 记住：FAA 的价值在于它会自己变得更聪明

工程师的工作是搭建舞台，AI 是主角。我们不预设剧本，让 AI 根据自己的能力和用户的需求自由发挥。这样，当 AI 技术进步时，FAA 自动获得新能力，无需重写代码。

## 文件引用
- 项目构想：[readme.MD](mdc:readme.MD) - "由ai驱动、尽量减少工程预设"
- AI 引擎：[ai_engine.py](mdc:src/ai_engine.py) - 实现 AI 自主决策
