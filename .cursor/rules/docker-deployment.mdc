---
globs: Dockerfile*,docker-compose*.yml,scripts/deploy.sh,.devcontainer/*
---
# Docker 和部署规则

## 部署理念：简单直接，一键启动

### 1. Docker Compose 设计
```yaml
# 极简的服务组合
services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=family_assistant
      - POSTGRES_USER=faa
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data

  faa-api:
    build: .
    environment:
      - DATABASE_URL=postgresql://faa:${DB_PASSWORD}@postgres:5432/family_assistant
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MCP_SERVER_URL=http://faa-mcp:8000
    depends_on:
      - postgres
      - faa-mcp
    ports:
      - "8000:8000"

  faa-mcp:
    build: ./mcp-server
    environment:
      - DATABASE_URL=postgresql://faa:${DB_PASSWORD}@postgres:5432/family_assistant
    depends_on:
      - postgres
```

### 2. Dockerfile 最佳实践
```dockerfile
# 多阶段构建，减小镜像体积
FROM python:3.12-slim as builder
WORKDIR /app
COPY requirements.txt .
RUN pip install --user -r requirements.txt

FROM python:3.12-slim
WORKDIR /app
COPY --from=builder /root/.local /root/.local
COPY . .
ENV PATH=/root/.local/bin:$PATH
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 3. 一键部署脚本
```bash
#!/bin/bash
# scripts/deploy.sh
set -e

# 拉取最新代码
git pull

# 构建并启动服务
docker-compose down
docker-compose build
docker-compose up -d

# 健康检查
sleep 10
curl -f http://localhost:8000/health || exit 1
echo "部署成功！"
```

### 4. 环境变量管理
```bash
# .env.example
OPENAI_API_KEY=sk-xxx
DB_PASSWORD=strong_password
THREEMA_ID=*ABCDEFG
THREEMA_SECRET=xxx
```

### 5. DevContainer 配置
```json
{
  "name": "FAA Development",
  "dockerComposeFile": "../docker-compose.yml",
  "service": "faa-api",
  "workspaceFolder": "/app",
  "features": {
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.12.11"
    }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance"
      ]
    }
  }
}
```

## CI/CD 自动化

### GitHub Actions 配置
```yaml
name: Deploy FAA
on:
  push:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "cd /opt/family-ai-assistant && ./scripts/deploy.sh"
```

## 部署原则
1. **零停机部署**：使用 docker-compose 的滚动更新
2. **配置分离**：敏感信息通过环境变量管理
3. **日志管理**：统一输出到 stdout，由 Docker 管理
4. **健康检查**：每个服务都要有 /health 端点
5. **数据持久化**：使用 Docker volumes 保存数据

## 注意事项
- 生产环境使用 .env 文件，不要提交到 Git
- 定期备份 PostgreSQL 数据
- 使用 Docker 的资源限制功能
- 配置自动重启策略

## 文件引用
- Docker Compose 配置：[docker-compose.yml](mdc:docker-compose.yml)
- 主 Dockerfile：[Dockerfile](mdc:docker/Dockerfile)
- 开发 Dockerfile：[Dockerfile.dev](mdc:docker/Dockerfile.dev)
- 部署脚本：[deploy.sh](mdc:scripts/deploy.sh)
